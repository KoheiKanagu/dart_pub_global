ARCH=$(uname -m)

# homebrew
if [[ $ARCH == "arm64" ]]; then
    eval $(/opt/homebrew/bin/brew shellenv)
    export PATH="/opt/homebrew/bin:$PATH"
else
    eval $(/usr/local/bin/brew shellenv)
    export PATH="/usr/local/bin:$PATH"
fi

MY_NAME=$(uname -n)
DOTFILES_DIR=~/Develop/global

function brewpush {
    pushd $DOTFILES_DIR
    cd global-private
    git fetch
    git add .
    git commit -m "update"
    git push
    cd ../

    brew bundle dump --force --brews --cask --tap
    git fetch
    git add .
    git commit -m "update"
    git push
    popd
}

function brewpull {
    pushd $DOTFILES_DIR
    git pull --rebase --recurse-submodules
    brew bundle install
    brew bundle cleanup --force
    npm --version
    dart pub get
    dart main.dart
    jq ".dependencies | keys | .[]" <npm/package.json | xargs -I DEPS npm install --global DEPS
    ./gh/bootstrap.sh
    ./gem/bootstrap.sh
    popd
}

export HOMEBREW_BUNDLE_FILE=$DOTFILES_DIR/dotfiles/Brewfile
export HOMEBREW_BUNDLE_NO_LOCK=true
export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30

# nvm
export NVM_DIR="$HOME/.nvm"
export NVM_BREW_DIR="$(brew --prefix)/opt/nvm"
[ -s "$NVM_BREW_DIR/nvm.sh" ] && \. "$NVM_BREW_DIR/nvm.sh" # This loads nvm

# rbenv
eval "$(rbenv init - zsh)"

# Java
## システムのJava
## JAVA_HOME=$(/usr/libexec/java_home -v "1.8")
export JAVA_HOME=/Applications/Android\ Studio.app/Contents/jbr/Contents/Home
export PATH=${JAVA_HOME}/bin:${PATH}

# Flutter
export PATH="$PATH:$HOME/fvm/default/bin"
export PATH="$PATH:$HOME/fvm/default/bin/cache/dart-sdk/bin"
export PATH="$PATH:$HOME/.pub-cache/bin"

# Android
export ANDROID_SDK_ROOT="/Users/kingu/Library/Android/sdk"
export PATH="$PATH:$HOME/Library/Android/sdk/platform-tools"
export PATH="$PATH:$ANDROID_SDK_ROOT/cmake/3.18.1/bin"

# fastlane
export PATH="$HOME/.fastlane/bin:$PATH"

# node
export PATH=$PATH:./node_modules/.bin

# alias
alias cat='bat'
alias f='open .'
alias x86='arch -x86_64 zsh'
alias ps='procs'

## lsd https://github.com/Peltoche/lsd
alias ls='lsd -A --group-dirs=last'
alias ll='lsd -Ahl --total-size --group-dirs=last'
alias tree='lsd -A --tree --group-dirs=last'
alias lr='lsd -Ahl --total-size --tree --group-dirs=last'

# [Finderで開いてるディレクトリへcdするコマンド \- Qiita](https://qiita.com/ucan-lab/items/c4b3466f53eac6f1a8b7)
cdf() {
    target=$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)')
    if [ "$target" != "" ]; then
        cd "$target"
        pwd
    else
        echo 'No Finder window found' >&2
    fi
}

# zsh
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt INC_APPEND_HISTORY

# gcloud
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

# Chrome
export CHROME_EXECUTABLE=$HOME/Develop/global/dotfiles/google-chrome-unsafe.sh

# zoxide https://github.com/ajeetdsouza/zoxide
eval "$(zoxide init zsh)"
